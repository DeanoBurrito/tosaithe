#ifndef UEFI_DEVICEPATH_H_INCLUDED
#define UEFI_DEVICEPATH_H_INCLUDED 1

#include "uefi.h"

#define EFI_DEVICE_PATH_PROTOCOL_GUID {0x09576e91,0x6d3f,0x11d2, {0x8e,0x39,0x00,0xa0,0xc9,0x69,0x72,0x3b}}
#define EFI_DEVICE_PATH_TO_TEXT_PROTOCOL_GUID {0x8b843e20,0x8132,0x4852, {0x90,0xcc,0x55,0x1a,0x4e,0x4a,0x7f,0x1c}}
#define EFI_DEVICE_PATH_FROM_TEXT_PROTOCOL_GUID {0x5c99a21,0xc70f,0x4ad2, {0x8a,0x5f,0x35,0xdf,0x33,0x43,0xf5,0x1e}}
#define EFI_DEVICE_PATH_UTILITIES_PROTOCOL_GUID {0x379be4e,0xd706,0x437d, {0xb0,0x37,0xed,0xb8,0x2f,0xb7,0x72,0xa4 }}

static const EFI_GUID EFI_device_path_protocol_guid = EFI_DEVICE_PATH_PROTOCOL_GUID;
static const EFI_GUID EFI_device_path_to_text_protocol_guid = EFI_DEVICE_PATH_TO_TEXT_PROTOCOL_GUID;
static const EFI_GUID EFI_device_path_from_text_protocol_guid = EFI_DEVICE_PATH_FROM_TEXT_PROTOCOL_GUID;
static const EFI_GUID EFI_device_path_utilities_protocol_guid = EFI_DEVICE_PATH_UTILITIES_PROTOCOL_GUID;

typedef struct _EFI_DEVICE_PATH_PROTOCOL {
    uint8_t Type;
    uint8_t SubType;
    uint8_t Length[2];
} EFI_DEVICE_PATH_PROTOCOL;

typedef CHAR16 *(EFIAPI *EFI_DEVICE_PATH_TO_TEXT_NODE)
        (IN CONST EFI_DEVICE_PATH_PROTOCOL* DeviceNode, IN BOOLEAN DisplayOnly,
                IN BOOLEAN AllowShortcuts);
typedef CHAR16 *(EFIAPI *EFI_DEVICE_PATH_TO_TEXT_PATH)
        (IN CONST EFI_DEVICE_PATH_PROTOCOL *DevicePath, IN BOOLEAN DisplayOnly,
                IN BOOLEAN AllowShortcuts );
typedef EFI_DEVICE_PATH_PROTOCOL *(EFIAPI *EFI_DEVICE_PATH_FROM_TEXT_NODE)
        (IN CONST CHAR16 *TextDeviceNode);
typedef EFI_DEVICE_PATH_PROTOCOL *(EFIAPI *EFI_DEVICE_PATH_FROM_TEXT_PATH)
        (IN CONST CHAR16 *TextDevicePath);

typedef struct _EFI_DEVICE_PATH_TO_TEXT_PROTOCOL {
    EFI_DEVICE_PATH_TO_TEXT_NODE ConvertDeviceNodeToText;
    EFI_DEVICE_PATH_TO_TEXT_PATH ConvertDevicePathToText;
} EFI_DEVICE_PATH_TO_TEXT_PROTOCOL;

typedef struct _EFI_DEVICE_PATH_FROM_TEXT_PROTOCOL {
    EFI_DEVICE_PATH_FROM_TEXT_NODE ConvertTextToDeviceNode;
    EFI_DEVICE_PATH_FROM_TEXT_PATH ConvertTextToDevicePath;
} EFI_DEVICE_PATH_FROM_TEXT_PROTOCOL;

typedef UINTN(EFIAPI *EFI_DEVICE_PATH_UTILS_GET_DEVICE_PATH_SIZE)
        (IN CONST EFI_DEVICE_PATH_PROTOCOL *DevicePath);
typedef EFI_DEVICE_PATH_PROTOCOL*(EFIAPI *EFI_DEVICE_PATH_UTILS_DUP_DEVICE_PATH)
        (IN CONST EFI_DEVICE_PATH_PROTOCOL *DevicePath);
typedef EFI_DEVICE_PATH_PROTOCOL*(EFIAPI *EFI_DEVICE_PATH_UTILS_APPEND_PATH)
        (IN CONST EFI_DEVICE_PATH_PROTOCOL *Src1, IN CONST EFI_DEVICE_PATH_PROTOCOL *Src2);
typedef EFI_DEVICE_PATH_PROTOCOL*(EFIAPI *EFI_DEVICE_PATH_UTILS_APPEND_NODE)
        (IN CONST EFI_DEVICE_PATH_PROTOCOL *DevicePath, IN CONST EFI_DEVICE_PATH_PROTOCOL *DeviceNode);
typedef EFI_DEVICE_PATH_PROTOCOL*(EFIAPI *EFI_DEVICE_PATH_UTILS_APPEND_INSTANCE)
        (IN CONST EFI_DEVICE_PATH_PROTOCOL *DevicePath, IN CONST EFI_DEVICE_PATH_PROTOCOL *DevicePathInstance);
typedef EFI_DEVICE_PATH_PROTOCOL*(EFIAPI *EFI_DEVICE_PATH_UTILS_GET_NEXT_INSTANCE)
        (IN OUT EFI_DEVICE_PATH_PROTOCOL **DevicePathInstance, OUT UINTN *DevicePathInstanceSize OPTIONAL);
typedef BOOLEAN(EFIAPI *EFI_DEVICE_PATH_UTILS_IS_MULTI_INSTANCE)
        (IN CONST EFI_DEVICE_PATH_PROTOCOL *DevicePath);
typedef EFI_DEVICE_PATH_PROTOCOL*(EFIAPI *EFI_DEVICE_PATH_UTILS_CREATE_NODE)(IN uint8_t NodeType,
        IN uint8_t NodeSubType, IN uint16_t NodeLength);

typedef struct _EFI_DEVICE_PATH_UTILITIES_PROTOCOL {
    EFI_DEVICE_PATH_UTILS_GET_DEVICE_PATH_SIZE  GetDevicePathSize;
    EFI_DEVICE_PATH_UTILS_DUP_DEVICE_PATH       DuplicateDevicePath;
    EFI_DEVICE_PATH_UTILS_APPEND_PATH           AppendDevicePath;
    EFI_DEVICE_PATH_UTILS_APPEND_NODE           AppendDeviceNode;
    EFI_DEVICE_PATH_UTILS_APPEND_INSTANCE       AppendDevicePathInstance;
    EFI_DEVICE_PATH_UTILS_GET_NEXT_INSTANCE     GetNextDevicePathInstance;
    EFI_DEVICE_PATH_UTILS_IS_MULTI_INSTANCE     IsDevicePathMultiInstance;
    EFI_DEVICE_PATH_UTILS_CREATE_NODE           CreateDeviceNode;
} EFI_DEVICE_PATH_UTILITIES_PROTOCOL;

#endif
